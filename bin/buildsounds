#!/usr/bin/env bash
set -eu

cd "$(dirname "$0")/.."

destdir="sound"
dest_sentences="$destdir/sentences.txt"
predefined_sentences="soundsrc/sentences.txt"
tts_sentences="soundsrc/sentences.jsonl"

__main() {
    __prepare
    __convert_sentences
    __generate_placeholders

    printf "Total sentences: %s/2048\n" "$(grep -Ec '^[^//].+$' "$dest_sentences")"
}

__prepare() {
    mkdir -p "$destdir"
    cp "../valve/sound/sentences.txt" "$dest_sentences"
    chmod -x "$dest_sentences"
    printf "Added %s sentences from Half-Life.\n" "$(grep -Ec '^[^//].+$' "$dest_sentences")"

    cat "$predefined_sentences" >> "$dest_sentences"
    printf "Added %s predefined sentences.\n" "$(grep -Ec '^[^//].+$' "$predefined_sentences")"
}

__convert_sentences() {
    echo "Converting static sentences."

    echo "// {{{ soundsrc" >> "$dest_sentences"

    added=0
    replaced=0
    for f in $(find soundsrc -type f -name "*.mp3"); do
        dst="${f%.*}" # remove ext
        dst="${dst#soundsrc/}" # strip prefix
        name="$(echo "$dst" | tr '/' '_' | tr '[:lower:]' '[:upper:]')"

        # Kindly ask tup to believe us when we say this needs to run when files are added.
        head "$f" > /dev/null

        # Overwritting sentences existing in base game, they don't follow our
        # naming conventions anyway.
        if [[ "$name" == SCIENTIST_* ]] || [[ "$name" == BARNEY_* ]]; then
            replaced=$((replaced+1))
            continue
        else
            added=$((added+1))
        fi

        echo "$name $dst" >> "$dest_sentences"
    done

    echo "// }}} soundsrc" >> "$dest_sentences"

    printf "Added %s static sentences.\n" "$added"
    printf "Replaced %s existing sounds.\n" "$replaced"
}

__generate_placeholders() {
    echo "Generating placeholds using TTS."
    echo "// {{{ Generated by bin/buildsounds" >> "$dest_sentences"
    readarray a < "$tts_sentences"

    for line in "${a[@]}"; do
        name="$(echo "$line" | jq -r '.[0]')"
        file="generated/$(echo "$name" | tr '[:upper:]' '[:lower:]').wav"
        sentence="$(echo "$line" | jq -r '.[1]')"
        noext="${file%.*}"

        if [ "${#name}" -gt 15 ]; then
            echo "$name is larger than 15 chars and will create a buffer overflow" 1>&2
            exit 1
        fi

        destfile="$destdir/$file"
        mkdir -p "$(dirname "$destfile")"
        echo "Generating $name to $destfile"

        # text2wave stdout output is buggy, it mangles the header and adds an
        # extraneous one at the end. We need the tmp buffer.
        tmpfile="$(mktemp --suffix=.wav)"
        echo "$sentence" | text2wave -f 22050 -o "$tmpfile"

        ffmpeg -y -loglevel error -i "$tmpfile" -filter:a "volume=2" -acodec pcm_u8 -ar 22050 -ac 1 "$destfile"
        rm "$tmpfile"
        echo "$name $noext" >> "$dest_sentences"
    done

    echo '// }}} Generated by bin/buildsounds' >> "$dest_sentences"

    printf "Added %s TTS-generated sentences.\n" "$(wc -l < "$tts_sentences")"
}

__main
